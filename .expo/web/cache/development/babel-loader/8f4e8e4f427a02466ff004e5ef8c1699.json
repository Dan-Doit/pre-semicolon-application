{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\zmffh\\\\OneDrive\\\\Desktop\\\\SemiColne\\\\semicolon-application\\\\screens\\\\auth\\\\Login.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  justify-content: center;\\n  align-items: center;\\n  flex: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components/native\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport AuthButton from \"../../components/AuthButton\";\nimport AuthInput from \"../../components/AuthInput\";\nimport useInput from \"../../hooks/useInput\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { LOG_IN } from \"./AuthQueries\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nvar View = styled.View(_templateObject());\nexport default (function (_ref) {\n  var navigation = _ref.navigation;\n  var emailInput = useInput(\"\");\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useMutation = useMutation(LOG_IN, {\n    variables: {\n      email: emailInput.value\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      requestSecret = _useMutation2[0];\n\n  var handleLogin = function handleLogin() {\n    var value = emailInput.value;\n    var emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (value === \"\") {\n      return Alert.alert(\"Email can't be empty\");\n    } else if (!value.includes(\"@\") || !value.includes(\".\")) {\n      return Alert.alert(\"Please write an email\");\n    } else if (!emailRegex.test(value)) {\n      return Alert.alert(\"That email is invalid\");\n    }\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(AuthInput, _extends({}, emailInput, {\n    placeholder: \"Email\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"send\",\n    onEndEditing: handleLogin,\n    autoCorrect: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  })), React.createElement(AuthButton, {\n    onPress: handleLogin,\n    text: \"Log In\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })));\n});","map":{"version":3,"sources":["C:/Users/zmffh/OneDrive/Desktop/SemiColne/semicolon-application/screens/auth/Login.js"],"names":["React","useState","styled","AuthButton","AuthInput","useInput","useMutation","LOG_IN","View","navigation","emailInput","loading","setLoading","variables","email","value","requestSecret","handleLogin","emailRegex","Alert","alert","includes","test","Keyboard","dismiss"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;;AAEA,OAAOC,UAAP;AACA,OAAOC,SAAP;AACA,OAAOC,QAAP;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,MAAT;;AAGA,IAAMC,IAAI,GAAGN,MAAM,CAACM,IAAV,mBAAV;AAMA,gBAAe,gBAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACjC,MAAMC,UAAU,GAAGL,QAAQ,CAAC,EAAD,CAA3B;;AADiC,kBAEHJ,QAAQ,CAAC,KAAD,CAFL;AAAA;AAAA,MAE1BU,OAF0B;AAAA,MAEjBC,UAFiB;;AAAA,qBAGTN,WAAW,CAACC,MAAD,EAAS;AAC1CM,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAGJ,UAAU,CAACK;AADV;AAD+B,GAAT,CAHF;AAAA;AAAA,MAG1BC,aAH0B;;AAQjC,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,QAChBF,KADgB,GACNL,UADM,CAChBK,KADgB;AAExB,QAAMG,UAAU,GAAG,wJAAnB;;AACA,QAAIH,KAAK,KAAK,EAAd,EAAkB;AAChB,aAAOI,KAAK,CAACC,KAAN,CAAY,sBAAZ,CAAP;AACD,KAFD,MAEO,IAAI,CAACL,KAAK,CAACM,QAAN,CAAe,GAAf,CAAD,IAAwB,CAACN,KAAK,CAACM,QAAN,CAAe,GAAf,CAA7B,EAAkD;AACvD,aAAOF,KAAK,CAACC,KAAN,CAAY,uBAAZ,CAAP;AACD,KAFM,MAEA,IAAI,CAACF,UAAU,CAACI,IAAX,CAAgBP,KAAhB,CAAL,EAA6B;AAClC,aAAOI,KAAK,CAACC,KAAN,CAAY,uBAAZ,CAAP;AACD;AACF,GAVD;;AAWA,SACE,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEG,QAAQ,CAACC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD,eACMd,UADN;AAEE,IAAA,WAAW,EAAC,OAFd;AAGE,IAAA,YAAY,EAAC,eAHf;AAIE,IAAA,aAAa,EAAC,MAJhB;AAKE,IAAA,YAAY,EAAEO,WALhB;AAME,IAAA,WAAW,EAAE,KANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EASE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,WAArB;AAAkC,IAAA,IAAI,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF,CADF;AAeD,CAlCD","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components/native\";\r\nimport { TouchableWithoutFeedback, Keyboard } from \"react-native\";\r\nimport AuthButton from \"../../components/AuthButton\";\r\nimport AuthInput from \"../../components/AuthInput\";\r\nimport useInput from \"../../hooks/useInput\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport { LOG_IN } from \"./AuthQueries\";\r\nimport { Alert } from \"react-native\";\r\n\r\nconst View = styled.View`\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1;\r\n`;\r\n\r\nexport default ({ navigation }) => {\r\n  const emailInput = useInput(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [requestSecret] = useMutation(LOG_IN, {\r\n    variables: {\r\n      email : emailInput.value\r\n    }\r\n  })\r\n  const handleLogin = () => {\r\n    const { value } = emailInput;\r\n    const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (value === \"\") {\r\n      return Alert.alert(\"Email can't be empty\");\r\n    } else if (!value.includes(\"@\") || !value.includes(\".\")) {\r\n      return Alert.alert(\"Please write an email\");\r\n    } else if (!emailRegex.test(value)) {\r\n      return Alert.alert(\"That email is invalid\");\r\n    }\r\n  };\r\n  return (\r\n    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n      <View>\r\n        <AuthInput\r\n          {...emailInput}\r\n          placeholder=\"Email\"\r\n          keyboardType=\"email-address\"\r\n          returnKeyType=\"send\"\r\n          onEndEditing={handleLogin}\r\n          autoCorrect={false}\r\n        />\r\n        <AuthButton onPress={handleLogin} text=\"Log In\" />\r\n      </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}